{"version":3,"sources":["components/SampleButton/SampleButton.js","components/App.js","serviceWorker.js","index.js"],"names":["SampleButton","props","audioHandler","React","createRef","handleButtonPress","bind","handleButtonRelease","endedHandler","console","log","this","buttonPressTimer","setTimeout","currentTime","audioElm","current","play","clearTimeout","pause","volume","padItem","item","Button","className","block","size","variant","value","title","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","onMouseLeave","id","keyTrigger","src","url","ref","onEnded","Component","samples","App","Row","map","idx","style","Col","key","xl","lg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a17cc621.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SampleButton.css';\nimport { Button } from 'react-bootstrap';\n// import ReactDOM from 'react-dom';\n\nclass SampleButton extends Component {\n  constructor(props) {\n    super(props);\n    this.audioHandler = React.createRef();\n    //this.onDrumPadClicked = this.onDrumPadClicked.bind(this);\n    this.handleButtonPress = this.handleButtonPress.bind(this);\n    this.handleButtonRelease = this.handleButtonRelease.bind(this);\n    this.endedHandler = this.endedHandler.bind(this);\n  }\n\n  handleButtonPress() {\n    console.log(\"handle button press\")\n    this.buttonPressTimer = setTimeout(() => console.log(\"press\", this.buttonPressTimer.currentTime), 1500);\n    const audioElm = this.audioHandler.current;\n    audioElm.currentTime = 0;\n    audioElm.play();\n  }\n\n  handleButtonRelease() {\n    console.log(\"handle button release\");\n    //this.audioElement.pause();\n    clearTimeout(this.buttonPressTimer);\n    const audioElm = this.audioHandler.current;\n    audioElm.pause();\n  }\n\n  // onDrumPadClicked() {\n  //   console.log(\"Clicked button\", this.props.item.title);\n  //   const audioElm = this.audioHandler.current;\n  //   audioElm.currentTime = 0;\n  //   audioElm.play();\n  // }\n\n  endedHandler(){\n    console.log(\"onEnded\");\n    const audioElm = this.audioHandler.current;\n    audioElm.currentTime = 0;\n    audioElm.play();\n  }\n\n  componentDidUpdate() {\n    this.audioHandler.current.volume = 100;\n  }\n\n  render() {\n    const padItem = this.props.item;\n    return (\n      // <Button className=\"shadow h-100 rounded\"\n      //   block size=\"lg\"\n      //   variant=\"secondary\"\n      //   value={padItem.title} onClick={this.onDrumPadClicked} ontou>\n      //   <audio className=\"clip\" id={padItem.keyTrigger} src={padItem.url} ref={this.audioHandler} />\n      //   {padItem.title} </Button>\n      <Button className=\"shadow h-100 rounded\"\n        block size=\"lg\"\n        variant=\"secondary\"\n        value={padItem.title}\n        onTouchStart={this.handleButtonPress}\n        onTouchEnd={this.handleButtonRelease}\n        onMouseDown={this.handleButtonPress}\n        onMouseUp={this.handleButtonRelease}\n        onMouseLeave={this.handleButtonRelease}>\n        <audio className=\"clip\" id={padItem.keyTrigger} src={padItem.url} ref={this.audioHandler} onEnded={this.endedHandler} />\n        {padItem.title} </Button>\n    );\n  }\n}\n\nexport default SampleButton;","import React from 'react';\r\nimport './App.css';\r\nimport { Row } from 'react-bootstrap';\r\nimport { Col } from 'react-bootstrap';\r\nimport SampleButton from './SampleButton/SampleButton';\r\n\r\nconst samples = [{\r\n    id: 1,\r\n    title: \"Test 1\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 2,\r\n    title: \"Test 2\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 3,\r\n    title: \"Test 3\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 4,\r\n    title: \"Test 4\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 5,\r\n    title: \"Test 5\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 6,\r\n    title: \"Test 6\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 7,\r\n    title: \"Test 7\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 8,\r\n    title: \"Test 8\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 9,\r\n    title: \"Test 9\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n},\r\n{\r\n    id: 10,\r\n    title: \"Test 10\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 11,\r\n    title: \"Test 11\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 12,\r\n    title: \"Test 12\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 13,\r\n    title: \"Test 13\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 14,\r\n    title: \"Test 14\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 15,\r\n    title: \"Test 15\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 16,\r\n    title: \"Test 16\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n},{\r\n    id: 17,\r\n    title: \"Test 17\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 18,\r\n    title: \"Test 18\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 19,\r\n    title: \"Test 19\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 20,\r\n    title: \"Test 20\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 21,\r\n    title: \"Test 21\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 22,\r\n    title: \"Test 22\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 23,\r\n    title: \"Test 23\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 23,\r\n    title: \"Test 23\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 24,\r\n    title: \"Test 24\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n},\r\n{\r\n    id: 25,\r\n    title: \"Test 25\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 26,\r\n    title: \"Test 26\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 27,\r\n    title: \"Test 27\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 28,\r\n    title: \"Test 28\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 29,\r\n    title: \"Test 29\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 30,\r\n    title: \"Test 30\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 31,\r\n    title: \"Test 31\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 32,\r\n    title: \"Test 32\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n    //url needed here to load the sample\r\n}, {\r\n    id: 33,\r\n    title: \"Test 33\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    id: 34,\r\n    title: \"Test 34\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}]\r\n\r\n\r\nfunction App() {\r\n    return (<Row className=\"d-flex h-100 justify-content-start\"> {\r\n        samples.map((item, idx) => {\r\n            var style = \"p-xs-3 p-sm-2 p-md-2 p-lg-1 p-xl-3\";\r\n            if(idx%5===0){\r\n                style+=\" offset-lg-1\"\r\n            }\r\n            return <Col key={idx} xl={2} lg={2}\r\n                className= {style} >\r\n                <SampleButton item={item}></SampleButton>\r\n            </Col >\r\n        })\r\n    } </Row>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}